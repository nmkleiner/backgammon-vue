cells [0(black outside),    1-24{triangles}, 25(white outside)    ,26(white eaten, top row),27{black eaten, bot row}]

cell {id , isHouseOf (white/black/false), isPossibleMove (true/false), middle(true/false),outside(true/false)}

soldier {color, isEaten, isOutside, isLastInCell, possibleMoves: []}

dices {num1:small num num2:big num doubleCount:0}
dices when double {num1:num num2:null doubleCount:4,3,2,1} => make num1 null when doublecount reaches 0


possibleMoves [{soldierId: moves: [1,2,3,4]},{},...]



-connectivity issues might destroy the game in the middle
-i decided to solve this for soldier moves by resending the move with an interval
example:
-white player interval sends moveDto until it's white player's turn again
-both players have lastMovesIds array, when move is received its id is pushed to array
-when move is received if it's id already exists in array, move will not be executed
-moves ids are timestamps therefore are 100% unique
-no real need to empty movesIds array but will empty it in watch if length grows over 10


-next problem is, other things that are sent on socket might have connectivity issues 
and will also destroy the game
-possible solution is to get rid of some of the things sent on the socket and 
use the moves for more situations like endTurn and endGame etc.
-will need to think about each case and send more data with moveDto 

-steps:
- map all sockets
- see what can be sent along with moveDto
- cancel unnecessary sockets while preserving the logic surrounding them
- sockets that cannot be sent along with moveDto will need to also be sent with interval
- intervals will be cleared at the same watch with one dispatch
- more dtosIds will be saved in store and cleared at some point in watch







****resend 1st player's move to 2nd player in case move wasn't delivered correctly
-how to implement?
game-cell
V - 2 - create random function in sender that will sometimes not send the move
game-cell
V - 4 - use interval to resend move to 2nd player, 
gameModule
V - 5 - kill interval when it's 1st player's turn again
appboard && game-cell && gameModule
V - I don't want to watch at gamecell because it means 28 watchers
V -> interval need to exist in store
V -> don't have $socket in store 
V -> send $socket to store then emit from store
V -> interval will be mutated to start and to kill
V -> watch on currentTurn will be in appboard
V - 6 - 2nd player will not use sent move if he already got it 
V - moves will have unique ids, they can be timestamps, 100% unique
V - last moves will be saved in gamemodule on every move that is received
V - last moves will be emptied when 2nd player's turn again
- because i'm not sure that turn will end at same time for both players i empty movesids
only when its length is bigger than 4 giving me some space
V - 8 - remove random function

