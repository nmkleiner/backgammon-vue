cells [0(black outside),    1-24{triangles}, 25(white outside)    ,26(white eaten, top row),27{black eaten, bot row}]

cell {id , isHouseOf (white/black/false), isPossibleMove (true/false), middle(true/false),outside(true/false)}

soldier {color, isEaten, isOutside, isLastInCell, possibleMoves: []}

dices {num1:small num num2:big num doubleCount:0}
dices when double {num1:num num2:null doubleCount:4,3,2,1} => make num1 null when doublecount reaches 0


possibleMoves [{soldierId: moves: [1,2,3,4]},{},...]



TODO: 
-session: save usercolor in sessionstorage
or find better solution (why did i wanted that?)
in case someone refreshes, or disconnects and reconnects take the current game state from other player

V-fix play again btn size in mobile
V-animation for indicators
V-middle indicators

V-btn-wrapper => cmp
V-add restart btn that shows when admin is connected
V-restart btn funcionality 


4-btns and links with v-for in array from data- GAVE UP

1-too many soldier in cell make moving immpossible
V-research when it happens
V-add flex wrap back
V-above 5 in cell put soldiers above each other
-middle cell indicator is too much left


-restart button will dispatch action strongRestart that will restart also the startgame module state
-nothing shows in info section


-resend 1st player's move to 2nd player in case move wasn't delivered correctly
-how to implement?

game-cell
V - 2 - create random function in sender that will sometimes not send the move
game-cell
V - 4 - use interval to resend move to 2nd player, 
gameModule
V - 5 - kill interval when it's 1st player's turn again
appboard && game-cell
- 6 - 2nd player will not use sent move if he already got it (moves will have unique ids)
aside-btn
- 7 - cancel reset button
